include <windows.h>

#include "drzewa.h"
#include "moves.h"
//#include "transp.h"

enum ehbmPieces { BM_B_PION_B, BM_B_PION_C, BM_B_WIEZA_B, BM_B_WIEZA_C,
                  BM_B_SKOCZEK_B, BM_B_SKOCZEK_C, BM_B_GONIEC_B, BM_B_GONIEC_C,
                  BM_B_HETMAN_B, BM_B_HETMAN_C, BM_B_KROL_B, BM_B_KROL_C,
                  BM_C_PION_B, BM_C_PION_C, BM_C_WIEZA_B, BM_C_WIEZA_C,
                  BM_C_SKOCZEK_B, BM_C_SKOCZEK_C, BM_C_GONIEC_B, BM_C_GONIEC_C,
                  BM_C_HETMAN_B, BM_C_HETMAN_C, BM_C_KROL_B, BM_C_KROL_C,
                  BM_B_PUSTE, BM_C_PUSTE };   

const char I_BPION = 0;
const char I_CPION = 1;
const char I_BWIEZA = 2;
const char I_CWIEZA = 3;
const char I_BSKOCZEK = 4;
const char I_CSKOCZEK = 5;
const char I_BGONIEC = 6;
const char I_CGONIEC = 7;
const char I_BHETMAN = 8;
const char I_CHETMAN = 9;
const char I_BKROL = 10;
const char I_CKROL = 11;
const char I_PUSTE = 12;
const char I_ZAJETE = 13;















const char PPos[8][8] =
  {{I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE }};

// pozycja wyjsciowa
const char SPos[8][8] =
  {{I_CWIEZA, I_CSKOCZEK, I_CGONIEC, I_CHETMAN, I_CKROL, I_CGONIEC, I_CSKOCZEK, I_CWIEZA},
   {I_CPION , I_CPION   , I_CPION  , I_CPION  , I_CPION, I_CPION  , I_CPION   , I_CPION },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_BPION , I_BPION   , I_BPION  , I_BPION  , I_BPION, I_BPION  , I_BPION   , I_BPION },
   {I_BWIEZA, I_BSKOCZEK, I_BGONIEC, I_BHETMAN, I_BKROL, I_BGONIEC, I_BSKOCZEK, I_BWIEZA}};

// pozycja testowa
const char TPos[8][8] =
  {{I_PUSTE , I_PUSTE   , I_BKROL  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_BPION   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_CPION  , I_BHETMAN, I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_CPION , I_CWIEZA  , I_CPION  , I_PUSTE  , I_PUSTE, I_BWIEZA , I_CPION   , I_CPION },
   {I_CPION , I_PUSTE   , I_CKROL  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_CGONIEC , I_BWIEZA},
   {I_BPION , I_PUSTE   , I_PUSTE  , I_CWIEZA , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_BPION , I_CSKOCZEK, I_PUSTE  , I_PUSTE  , I_PUSTE, I_CPION  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_BSKOCZEK, I_PUSTE, I_BGONIEC, I_PUSTE   , I_PUSTE }};
const char T2Pos[8][8] =
  {{I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_CPION },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_CPION  , I_PUSTE   , I_CKROL },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_BKROL  , I_BHETMAN , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE }};
const char T3Pos[8][8] =
  {{I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_BPION  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_BKROL, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_PUSTE },
   {I_PUSTE , I_PUSTE   , I_PUSTE  , I_PUSTE  , I_PUSTE, I_PUSTE  , I_PUSTE   , I_CKROL }};
   EKolor KolorPrzeciwny(EKolor kolor)
{
  switch (kolor) {
  case C_CZARNE : return C_BIALE;
  case C_BIALE  : return C_CZARNE;
  }
  return C_BRAK;
}

EKolor KolorBierki(char	bierka)
{
  switch (bierka) {
  case I_PUSTE :
       return C_BRAK;
  case I_BPION:	case I_BWIEZA: case I_BSKOCZEK:
  case I_BGONIEC: case I_BHETMAN: case I_BKROL:
       return C_BIALE;
  case I_CPION:	case I_CWIEZA: case I_CSKOCZEK:
  case I_CGONIEC: case I_CHETMAN: case I_CKROL:
       return C_CZARNE;	
  }
  return C_BRAK;       // dummy return

CMoveInfo::CMoveInfo(char* src_move, char* dest_move)
{
  if (
       ( strlen(src_move) != 2 ) ||
       ( strlen(dest_move) != 2 )
     )
  {
    throw EMoveInfo_BADINITIALIZATION();
  }

  ys = src_move[0]-65;
  xs = src_move[1]-49;
  yd = dest_move[0]-65;
  xd = dest_move[1]-49;

  val = 0;

}

CSzachownica::CSzachownica()
{
  int i,j;
  for (i=0; i<8; i++)
    memset(bierki+i, I_PUSTE, 8);
}

CSzachownica::CSzachownica(const CSzachownica& szach)
{
  int i,j;
  for (i=0; i<8; i++)
    memcpy(bierki[i], szach.bierki[i], 8);
  k_ruch	   = szach.k_ruch;
  b_roszadakrotka  = szach.b_roszadakrotka;
  b_roszadadluga   = szach.b_roszadadluga;
  c_roszadakrotka  = szach.c_roszadakrotka;
  c_roszadadluga   = szach.c_roszadadluga;
  pm               = szach.pm;
  doremisu         = szach.doremisu;
  nr_pos           = szach.nr_pos;
}

// ----------------------------------------------

void CSzachownica::UstawieniePoczatkowe()
{
  int i,j;

  pm.xs = -10;	pm.ys	= -1;
  pm.xd = -1;   pm.yd   = -1;
  k_ruch = C_BIALE;
  nr_pos = 0;
  b_roszadakrotka = true;
  b_roszadadluga = true;
  c_roszadakrotka = true;
  c_roszadadluga = true;
  doremisu = 0;

  for (i=0; i<8; i++)
    for (j=0; j<8; j++)
      bierki[i][j] = SPos[7-i][j];
}


// ----------------------------------------------
void CSzachownica::PrzeciwnaStronaGra()
{
      if (k_ruch==C_BIALE)
	  k_ruch=C_CZARNE;
	  else
	  k_ruch=C_BIALE;
}

// ----------------------------------------------
// poniewaz w petli glownej operuje sie caly czas na tej samej
// planszy, wiec
// ta funkcja powinna:
// - zapamietac poprzedni ruch
// - ilosc ruchow do remisu
// - modyfikowac flagi roszowania

void CSzachownica::PrzesunBierke(CMoveInfo move)
{
   int xs = move.xs;
   int ys = move.ys;
   int xd = move.xd;
   int yd = move.yd;

   nr_pos++;

   char* bierka_s = &bierki[xs][ys];
   char* bierka_d = &bierki[xd][yd];

   // jesli nie ma bicia to licz ruchy do remisu
   if (*bierka_d == I_PUSTE) doremisu++; else doremisu = 0;

   // sprawdz czy bicie w przelocie, zabij tego piona ktory
   // ruszyl sie poprzednio
   char *bierka_pod = (xd == 2 ? &bierki[3][yd] : &bierki[4][yd]);
   if (
        (
          (*bierka_s == I_BPION && *bierka_pod == I_CPION) ||
          (*bierka_s == I_CPION && *bierka_pod == I_BPION)
        ) &&
        (pm.ys == yd) && (pm.yd == yd) &&
        (pm.xd == xs) &&
        (xd == 2 || xd == 5)
      )
      *bierka_pod = I_PUSTE;

   // wlasciwe przesuniecie !!

   // zapamietaj ostatnie posuniecie
   pm.xs = xs; pm.xd = xd;
   pm.ys = ys; pm.yd = yd;

   // przesun bierke na nowe miejsce
   *bierka_d = *bierka_s;
   *bierka_s = I_PUSTE;

   // ! testy przypadkow szczegolnych !

   // sprawdz czy promocja piona
   if (
        (xs == 6 && xd == 7 && *bierka_d == I_BPION) ||
        (xs == 1 && xd == 0 && *bierka_d == I_CPION)
      )
      if (move.nacopromowac != I_PUSTE)
      {
        *bierka_d = move.nacopromowac;
      }

   // sprawdz czy to roszada i ew. przesun wieze
   if (
        ys == 4 && yd == 2 &&
        (
          (xs == 0 && *bierka_d == I_BKROL) ||
          (xs == 7 && *bierka_d == I_CKROL)
        )
      )
   {
     bierki[xs][3] = (xs == 0 ? I_BWIEZA : I_CWIEZA);
     bierki[xs][0] = I_PUSTE;
   }
   if (
        ys == 4 && yd == 6 &&
        (
          (xs == 0 && *bierka_d == I_BKROL) ||
          (xs == 7 && *bierka_d == I_CKROL)
        )
      )
   {
     bierki[xs][5] = (xs == 0 ? I_BWIEZA : I_CWIEZA);
     bierki[xs][7] = I_PUSTE;
   }
